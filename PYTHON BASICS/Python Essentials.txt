STRINGS

-> Strings in Python are used to hold text information and are indicated with the use of single or double quotes.
-> We can also think of a string as a sequence of characters, this means there is an order to the string.

LISTS

-> Lists are a data structure in Python can hold elements in a sequence defined by brackets where each element is spaced out by a comma:
   ["item", 0, 10.3, "some", myvar ]
-> We can use them to organize data in a sequence ordering, meaning we can then grab individual elements from that list.

DICTIONARIES

-> Dictionaries allow us to store data in key-value pairs:
    -> { "key1" : "value1", "key2" : "value2" }
-> Notice how keys aren't typically numbers, we use dictionaries when it makes more sense to organize data lookup by a key rather than position.

TUPLES

-> Tuples aresimilar to lists except for the fact that they are immutable ( cannot be changed or mutated )
-> Due to their immutability, they have less methods htan lists, they are used when you don't expect ( or want ) a user to be able to change the sequence of items.
-> While we don't manually define tuples often, we do see many fucntions return tuples when returning results.
-> Recall we saw the .items() method for dictionaries, this returned a tuple of key-value pairs. 

BOOLEANS

-> Booleans will be our baseic building block for logic and control flow, allowing us to indicate if something is True or False.

PYTHON CONTROL FLOW 

-> To control this flow of logic we use some keywords:
    -> if
    -> elif
    -> else
-> Control Flow syntax makes use of colons and indentation ( whitespace ).
-> This indentation system is crucial to Python and is what sets it apart from other programming languages.

-> if/elif/else syntax:
    if some_condition:
        # execute some code
    elif some_other_condition:
        # do something different
    else:
        # do something else

PYTHON FOR LOOPS

-> The term 'iterable' means you can "iterate" over the object.
-> For example, you can iterate over every character in a string, iterate over every item in a list, iterate over every key in a dictionary.
-> Syntax of a for loop:
    myiterable = [1, 2, 3]
    for itemname in myiterable:
        print(itemname)

PYTHON WHILE LOOPS

-> While loops will continue to execute a block of code while some condition remains True.
-> For example, while my pool is not full, keep filling my pool with water.
-> Or while my dogs ate still hungry, keep feeding my dogs.

-> Syntax of a while loop:
    while some_boolean_condition:
        # do something
    else:
        # do something else

PYTHON FUNCTIONS

-> Often you'll have some code you want to be able to use multiple times, but without having to always rewrite that same block of code.
-> We can use functions to have a repeat use block code to easily execute.
-> Creating a function requires specific stntax, including the def keyword, correct indentation, and proper structure.
-> Syntax of a function:
    def nameoffunction():
        # do something
-> Typically we use the return keyword to send back the result of the function, instead of just printing it out.
-> return allows us to assign the output of the function to a new variable.