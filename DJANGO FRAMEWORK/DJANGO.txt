DJANGO

-> Created by Adrian Holovaty and Simon Willison when they worked at Lawrence Journal-World newspaper.
-> Released under BSD license in 2005 and in 2008 the non-profit Django Software foundation was created.
-> Named after Django Reinhardt, a jazz guitarist.
-> Python based framework for creating web applications.
-> Framework provides rules, structures, and functionality that allows us to use Python code and libraries on the back end of our web application.
-> Python is the programming language used to work wtih Django.
-> Django can then interact with our web applications to send information to the user of the web application.

FEATURES OF DJANGO

-> Allows for fast development.
-> Many common features included.
-> Updated often and secure.
-> Very scalable.
-> Very versatile with Python.
-> Lots of built-in functionality:
    -> Administration
    -> Authentication
    -> Database Interaction
    -> Security
-> Model-Template-View (MTV) Architecture
    -> ORM - Object Relational Mapper
    -> Models 
    -> URLs and Views
    -> Templates

-> You may have heard Django has "batteries included" or is "fully loaded".
-> This just means that is has a lot of built in Python modules that take care of really common web application features.

-> One of the most important aspects of Django is that since it uses Python as its programming language, we get to use all the cool Python libraries available to use easily within Django!

DJANGO CONS

-> Since it has so many features, there is sometimes a bit of a steep learning curve.
-> It may include many features you don't intend on using.
-> Built with Python

WHO USES DJANGO?

-> Instagram 
-> Spotify
-> Facebook
-> YouTube
-> Pinterest
-> Dropbox
-> EventBrite

DJANGO DRAWBACKS

-> Heavily reliant on the idea of Model.
-> The model is a Python/Django representation of a table in a database.
-> This makes it very easy to work with querying data, but does add the requirement of understanding Models and setting them up for views.

DJANGO PROJECTS

-> Django Projects can have separated components called "apps".
-> Don't get condused by this nomenclature!
-> Typically a "web app" describes the full website or mobile application on the web.
-> A "Django app" is a sub-component of a single Django Project ( web application )
-> Often it becomes much easier to organize your code through the use  of apps.
-> Each app should cover a different key functionality for your website.
-> Also keep in mind that if you're beginning as a solo developer with a simple website, it may make more sense to put everything under a single Django app. 


DJANGO VIEWS AND URLs

-> In Django, Views dictate what information is being shown to the client, and URLs dictate where that information is shown on the website.
-> These work in concert so you can think of each View/URL pairing as a web page on the website.
-> Django Viewsa and URLs support a lot of dynamic and logic features to help with this sort of task.
-> A list of view routes is defined in a list variable called urlpatterns.

-> Connecting a View to a URL with path():
    -> kwargs
        -> Allows us to pass in keyword arguments as a dictionary to the view.
    -> name
        -> Allows us to name a URL in order to reference it else where in Django.

USING RESPONSENOTFOUND AND 404 PAGES

-> Inevitably, there will be a time when a client requests a web page view that does not exist or the client did not provide the correct URL route.
-> In these cases, we use HttpResponseNotFound to return a 404 error page to the client.
-> Django also has a default 404 page we can display.

REDIRECT BASICS

-> Sometimes a client user will provide a path that we want to redirect to another webpage on our site.
-> This can be accomplished in Django through the use of the HttpResponseRedirect() function.

REVERSE URLS AND URL NAMES

-> As our websites get larger and larger and more complex, we'll keep adding more views and more URLs across the project and apps.
-> This leads to more instances where we'll need to reference existing pages (URLs on across our website)