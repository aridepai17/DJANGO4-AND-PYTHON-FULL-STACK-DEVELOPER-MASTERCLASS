TEMPLATE DIRECTORIES 

-> Usually, however, we would like to know to separate out template folders based on their application rather than have a single template folder for the entire project.
-> Separating out template directories by app is more ideal because in the future you may want to reuse a Django app in a future project.
-> Having everything in its own app directory makes this reuse easy.
-> In order for the Django Project to be aware of the app's template directory existence, we do need to register the custom Django app in the settings.py under the INSTALLED_APPS variable.

-> Often you'll have multiple template files with the same name ( multiple index.html files, one for each app index view page ).
-> Because of the way Django searches for matching template names, to make sure we get the relevant template for the app, we create the app subdirectory underneath the template folder.

DJANGO FILTERS

-> Filters are built-in modifiers in Django templating that allow you to quickly apply a change to a variable on the template side, rather than in your Python script.

DJANGO TAGS

-> Django tags are able to provide further logic at the template in the rendering process.
-> This includes a lot of functionalities, such as for loops, if-else statements, and linking to URLs.
-> Django also has if, elif, and else tags.
-> We can also use boolean and comparison operators along with these tags, for example:
    -> ==, or, and, not, >=
-> Similar to the Django Tag for loops, we will need an end Tag for if statements.
    -> { % if var == True %} 
    -> { % end %}

URL NAMES IN TEMPLATES

-> The path() function call we could assign names to URLs.
-> This in turn allows us to use the {% url %} tag to easily create links to other pages based on their URL name in urls.py

TEMPLATE INHERITANCE

-> Typically you don't want to have every single template hold repetitive information, such as the navigation bar at the top of your website.
-> Instead we can inherit these components through the use of the Django {%block%} tags.

CUSTOM ERROR TEMPLATES

-> Many pages, such as admin or 404 pages have built-in templates provided by Django for your convience.
-> However, we have the ability to overwrite any of these built-in templates.

STATIC FILES

-> Most projects will have static files, such as images, JS, or CSS.
-> Django can serve these static files through the use of Tags, instead of having to refer to a full file path.
-> This is similar to the {% url %} tag, but using a {% static %} tag instead.