PYTHON ERRORS AND EXCEPTION HANDLING

-> When people are using our website, there may be instances where we don't have complete information ot fulfill their web page request.
-> We need a way to make sure the site's functions can still operate, even if an error were to occur.
-> For example, you've have seen webpages that return a 404 page if the page doesn't exist or the user enetered the wrong domain URL extension.
-> We'll need a way try to execute a block of code, but continue to another block if the code doesn't work!
-> You've definitely already seen Python issue an Exception Error, where Python tries ot inform you of the specific error taking place, for example an IOError or TypeError.
-> You can actually write code for specific error situations.

-> We can use three keywords for this:
    -> try: This is the block of code to be attempted ( may lead to an error )
    -> except: Block of code will execute in case there is an error in try block.
    -> finally: A final block of code ot be executed, regardless of an error.

PYTHON OBJECT ORIENTED PROGRAMMING

-> Object Oriented Programming (OOP) allows programmers to create their won objects that have methods and attributes.
-> The syntax format is often confusing when first encountered,and its usefulness may not be completely clear at first.
-> In general, OOP allows us to create code that is repeatable and organized.
-> For much larger scripts of Python code, functions by themselves aren't enough for organization and repeatablility.
-> Commonly repeated tasks and objects can be defined with OOP to create code that is more usable.
-> Syntax 

class NameOfClass():
    def __init__(self,param1,param2):
    self.param1 = param1
    self.param2 = param2
        
    def somemethod(self):
        #perform some action
        print(self.param)

PYTHON INHERITANCE

-> We would like to create our own derived variations of these classes through the use of inheritance.
-> Inheritance allows us ot pass in an existing class inot a new class, which means we get to inherit the use of the methods already defined within the parent class ( including the __init__ method )
-> This saves us a lot of time and is a very common syntax in Django.

PYTHON MODULES AND PACKAGES

-> When creating complex code bases, we typically don't use a single .py file, instead we would like to break up functionality across multiple Python files and import our classes or functions as needed.
